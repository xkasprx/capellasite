let html = document.getElementsByTagName(`html`)[0];
let body = document.getElementsByTagName(`body`)[0];
let root = document.getElementsByTagName(`root`)[0];
let loggedIn = true;
let hash;

html.onmousedown = async function(e){
	if(e.button === 2){
		e.preventDefault();
		alert(`Right click is disabled.`);
		return;
	}
};

body.ondragstart = function(){return false};
body.ondrop = function(){return false};

async function createTopBar(){
	let header = document.createElement(`div`);
	let title = document.createElement(`div`);
	let menu = document.createElement(`div`);
	let titleLink = document.createElement(`a`);
	let titleImg = new Image(300, 75);
	
	titleLink.href = `#home`;
	titleImg.src = `../images/header.png`;
	header.id = `header`;
	title.id = `title`;
	menu.id = `menu`;
	
	titleLink.appendChild(titleImg);
	title.appendChild(titleLink);
	
	if(loggedIn){
		let directoryLink = document.createElement(`div`);
		let postsLink = document.createElement(`div`);
		let dashboardLink = document.createElement(`div`);
		let logoutLink = document.createElement(`div`);
		
		directoryLink.className = `headerLinks`;
		directoryLink.innerHTML = `<a href="#directory"><i class="fa-solid fa-user"></i> Developers</a>`;
		postsLink.className = `headerLinks`;
		postsLink.innerHTML = `<a href="#posts"><i class="fa-solid fa-comment"></i>  Posts</a>`;
		dashboardLink.className = `headerLinks`;
		dashboardLink.innerHTML = `<a href="#dashboard"><i class="fa-solid fa-user"></i>  Dashboard</a>`;
		logoutLink.className = `headerLinks`;
		logoutLink.innerHTML = `<a href="javascript:void(0)"><i class="fa-solid fa-right-from-bracket"></i>  Logout</a>`;
		
		logoutLink.setAttribute(`onclick`, `processButton(this);`)
		logoutLink.back = `/logout`;

		menu.appendChild(directoryLink);
		menu.appendChild(postsLink);
		menu.appendChild(dashboardLink);
		menu.appendChild(logoutLink);
	}else{
		let loginLink = document.createElement(`div`);
		let registerLink = document.createElement(`div`);

		loginLink.className = `headerLinks`;
		loginLink.innerHTML = `<a href="#login"><i class="fa-solid fa-arrow-right-to-bracket"></i>  Login</a>`;
		registerLink.className = `headerLinks`;
		registerLink.innerHTML = `<a href="#register"><i class="fa-solid fa-file-lines"></i>  Register</a>`;

		menu.appendChild(loginLink);
		menu.appendChild(registerLink);
	}

	header.appendChild(title);
	header.appendChild(menu);
	root.appendChild(header);
};

async function loadDashboard(){
	
};

async function loadDirectory(){

};

async function loadForgotPass(){
	let section = document.createElement(`section`);
	let formCell = document.createElement(`div`);
	let formTitle = document.createElement(`h1`);
	let sectionForm = document.createElement(`form`);
	let formEmail = document.createElement(`div`);
	let submitButton = document.createElement(`button`);
	let reminder = document.createElement(`div`);
	
	section.className = `topSection`;
	sectionForm.id = `loginForm`;
	sectionForm.back = `/forgot`;
	sectionForm.setAttribute(`onsubmit`, `return false;`);
	formCell.className = `regloginform`;
	formEmail.className = `emailInput`;
	submitButton.id = `submitButton`;
	submitButton.textContent = `Submit`;
	submitButton.setAttribute(`submitType`, `forgot`);
	submitButton.setAttribute(`onclick`, `processButton(this.parentElement);`)
	reminder.className = `regloginReminder`;

	formTitle.innerText = `Forgot Password`;
	formEmail.innerHTML = `<label>Email</label><input type="email" onchange="validateInput(this, this.type);"></input>`;
	reminder.innerHTML = `<a href="#home"><h4>Cancel</h4></a>`

	formCell.appendChild(formTitle);
	sectionForm.appendChild(formEmail);
	sectionForm.appendChild(submitButton);
	sectionForm.appendChild(reminder);
	formCell.appendChild(sectionForm);
	section.appendChild(formCell);
	root.appendChild(section);

	setTimeout(() => root.querySelector(`input`).focus(), 100);

};

async function loadHome(){
	let section = document.createElement(`section`);
	let landingContent = document.createElement(`div`);
	let blockContainer = document.createElement(`div`);
	let container = document.createElement(`div`);
	let imgContainer = document.createElement(`section`);
	let sectionImg = new Image();

	section.className = `topSection`;
	sectionImg.src = `../images/hero-img.svg`;
	imgContainer.id = `landingImage`;

	landingContent.innerHTML = `<h1>DevBook</h1><p>Create a developer profile, share posts and get help from other developers</p><a href="#login"><button id="login">Get Started</button></a>`;
	blockContainer.innerHTML = `<h1>How to get started</h1><p><strong>1 </strong>Customize your profile. Click your profile image in the top right corner, then select the gear icon to make your profile uniquely yours.</p><p><strong>2 </strong>Explore fellow developers and posts.</p><p><strong>3 </strong>Like the posts you like to share the love and start getting to know the community.</p><p><strong>4 </strong>Reply to a question in an existing thread or ask a question by creating a new topic.</p>`;
	container.innerHTML = `<h1>What is DevBook</h1><p>DevBook is a community for growing developers.</p>`;
	
	imgContainer.appendChild(sectionImg);
	section.appendChild(landingContent);
	
	section.appendChild(blockContainer);
	section.appendChild(container);
	root.appendChild(section);
	root.appendChild(imgContainer);
};

async function loadLogin(){
	let section = document.createElement(`section`);
	let formCell = document.createElement(`div`);
	let formTitle = document.createElement(`h1`);
	let sectionForm = document.createElement(`form`);
	let formEmail = document.createElement(`div`);
	let formPassword = document.createElement(`div`);
	let submitButton = document.createElement(`button`);
	let reminder = document.createElement(`div`);
	
	section.className = `topSection`;
	sectionForm.id = `loginForm`;
	sectionForm.back = `/login`;
	sectionForm.setAttribute(`onsubmit`, `return false;`);
	formCell.className = `regloginform`;
	formEmail.className = `emailInput`;
	formPassword.className = `passInput`;
	submitButton.id = `submitButton`;
	submitButton.textContent = `Submit`;
	submitButton.setAttribute(`submitType`, `login`);
	submitButton.setAttribute(`onclick`, `processButton(this.parentElement);`)
	reminder.className = `regloginReminder`;

	formTitle.innerText = `Login`;
	formEmail.innerHTML = `<label>Email</label><input type="email" onchange="validateInput(this, this.type);"></input>`;
	formPassword.innerHTML = `<label>Password</label><input type="password" onchange="validateInput(this, this.type);"></input>`;
	reminder.innerHTML = `<h4>Don't have an account? <a href="#register">Sign Up</a> | <a href="#forgot">Forgot Password</a></h4>`;

	formCell.appendChild(formTitle);
	sectionForm.appendChild(formEmail);
	sectionForm.appendChild(formPassword);
	sectionForm.appendChild(submitButton);
	sectionForm.appendChild(reminder);
	formCell.appendChild(sectionForm);
	section.appendChild(formCell);
	root.appendChild(section);

	setTimeout(() => root.querySelector(`input`).focus(), 100);

};

async function loadPosts(){

};

async function loadProfile(){

};

async function loadRegister(){
	let section = document.createElement(`section`);
	let formCell = document.createElement(`div`);
	let formTitle = document.createElement(`h1`);
	let sectionForm = document.createElement(`form`);
	let formEmail = document.createElement(`div`);
	let formPassword = document.createElement(`div`);
	let formVerify = document.createElement(`div`);
	let submitButton = document.createElement(`button`);
	let reminder = document.createElement(`div`);

	section.className = `topSection`;
	sectionForm.id = `registerForm`;
	sectionForm.back = `/register`;
	sectionForm.setAttribute(`onsubmit`, `return false;`);
	formCell.className = `regloginform`;
	formEmail.className = `emailInput`;
	formPassword.className = `passInput`;
	formVerify.className = `passInput`;
	submitButton.id = `submitButton`;
	submitButton.textContent = `Submit`;
	submitButton.setAttribute(`submitType`, `register`);
	submitButton.setAttribute(`onclick`, `processButton(this.parentElement);`)
	reminder.className = `regloginReminder`;

	formTitle.innerText = `Register`;
	formEmail.innerHTML = `<label>Email</label><input type="email" onchange="validateInput(this, this.type);"></input>`;
	formPassword.innerHTML = `<label>Password</label><input type="password" onchange="validateInput(this, this.type);"></input>`;
	formVerify.innerHTML = `<label>Verify</label><input type="password" onchange="validateInput(this, this.type);"></input>`;
	reminder.innerHTML = `<h4>Already have an account? <a href="#login">Login</a></h4>`;

	formCell.appendChild(formTitle);
	sectionForm.appendChild(formEmail);
	sectionForm.appendChild(formPassword);
	sectionForm.appendChild(formVerify);
	sectionForm.appendChild(submitButton);
	sectionForm.appendChild(reminder);
	formCell.appendChild(sectionForm);
	section.appendChild(formCell);
	root.appendChild(section);

	setTimeout(() => root.querySelector(`input`).focus(), 100);
};

async function login(){

};

async function logout(){

};

async function processButton(el){
	let target = el.back;
	let cookies = await str2arr(document.cookie, `; `);
	let data = {};

	let fields = el.getElementsByTagName(`input`);

	for(let i = 0; i < fields.length; i++){
		let field = fields[i];
		let key = field.type;
		let value = field.value;

		data[key] = value;
	}

	await fetch(target, {
		headers: {
			'Content-Type': `application/json`,
			'Authorization': cookies,
		},
		method: `POST`,
		mode: `cors`,
		body: JSON.stringify(data),
	}).then(async r => {
		let message = r.statusText;
		let url = window.location.origin;

		if(message.includes(`Alert:`)){
			let msg = message.split(`:`)[2];
			alert(msg);
		}

		if(message.startsWith(`Register`)){
			window.location.href = `${url}/#login`;
		}else if(message.startsWith(`Login`)){
			loggedIn = true;
			window.location.href = `${url}/#dashboard`;
		}else if(message.startsWith(`Forgot`)){
			window.location.href = `${url}/#login`;
		}else if(message.startsWith(`Logout`)){
			loggedIn = false;
			window.location.href = `${url}/#home`;
		}

	})
};

async function removeElements(){
	let elements = root.children;
	let elementsToRemove = [];
	
	for(let i = 0; i < elements.length; i++){
		let element = elements[i];
		elementsToRemove.push(element);
	}

	for(let i = 0; i < elementsToRemove.length; i++){
		let element = elementsToRemove[i];
		element.remove();
	}

	await createTopBar();
};

window.onhashchange = async function(){
	hash = location.hash && location.hash.slice(1);

	await removeElements();

	if(loggedIn){
		switch (hash) {
			case `profile`:
				await loadProfile();
				break;
			case `directory`:
				await loadDirectory();
				break;
			case `dashboard`:
				await loadDashboard();
				break;
			case `posts`:
				await loadPosts();
				break;
			case `logout`:
				await logout();
				break;
			default:
				await loadDashboard();
				location.hash = `#dashboard`;
				break;
		}
	}else{
		switch (hash) {
			case `home`:
				await loadHome();
				break;
			case `register`:
				await loadRegister();
				break;
			case `login`:
				await loadLogin();
				break;
			case `directory`:
				await loadDirectory();
				break;
			case `forgot`:
				await loadForgotPass();
				break;
			default:
				await loadHome();
				location.hash = `#home`;
				break;
		}
	}
};

window.onload = async function(){
	hash = location.hash && location.hash.slice(1);

	await removeElements();

	if(loggedIn){
		switch (hash) {
			case `profile`:
				await loadProfile();
				break;
			case `directory`:
				await loadDirectory();
				break;
			case `posts`:
				await loadPosts();
				break;
			case `logout`:
				await logout();
				break;
			default:
				await loadDashboard();
				location.hash = `#dashboard`;
				break;
		}
	}else{
		switch (hash) {
			case `home`:
				await loadHome();
				break;
			case `register`:
				await loadRegister();
				break;
			case `login`:
				await loadLogin();
				break;
			case `forgot`:
				await loadForgotPass();
				break;
			default:
				await loadHome();
				location.hash = `#home`;
				break;
		}
	}
};

// Utilities
async function str2arr(string, split, a = []){
	let str = string.split(split);
	
	for(let i in str){
		let cur = str[i].split('=');
		a[cur[0]] = cur[1];
	}
	return a;
};
async function validateInput(el, type){
	let markedInvalid = el.classList.contains(`invalid`);

	if(type === `email`){
		let emailRegex = /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/;
		let value = el.value;
		let isEmail = emailRegex.test(value);
	
		if(isEmail && markedInvalid){
			el.classList.remove(`invalid`);
		}else if(!isEmail && !markedInvalid){
			el.classList.add(`invalid`);
		}
	}else if(type === `number`){
		let list = el.parentElement.parentElement;
		let value = el.value;
		let max = list.children.length;
		
		if(value > max || value < 1){
			el.classList.add(`invalid`);
		}else if(markedInvalid){
			el.classList.remove(`invalid`);
		}
	}else if(type === `password`){
		let passInputs = el.parentElement.parentElement.getElementsByClassName(`passInput`);
		let newInput = passInputs[0].getElementsByTagName(`input`)[0];
		let verifiedInput = passInputs[1] && passInputs[1].getElementsByTagName(`input`)[0];

		if(verifiedInput && verifiedInput.value){
			if(newInput.value === verifiedInput.value && markedInvalid){
				newInput.classList.remove(`invalid`);
				el.classList.remove(`invalid`);
			}else if(newInput.value !== verifiedInput.value && !markedInvalid){
				el.classList.add(`invalid`);
			}
		}
	}else if(type === `url`){
		let imageRegex = /(https:\/\/.+\.\w{2,3}\/.+\.(?:png|jpg))/i;
		let newInput = el.parentElement.parentElement.querySelector(`newAvatar`).querySelector(`input`);
		let valid = imageRegex.test(newInput.value)

		if(valid && markedInvalid){
			newInput.classList.remove(`invalid`);
			el.classList.remove(`invalid`);
		}else if(!valid && !markedInvalid){
			el.classList.add(`invalid`);
		}
	}else if(type === `text`){
		let valid = el.value.length > 0;
		
		if(valid && markedInvalid){
			el.classList.remove(`invalid`);
		}else if(!valid && !markedInvalid){
			el.classList.add(`invalid`);
		}

		return valid;
	}
};
document.onkeydown = async function(e){
	let enter = e.key === `Enter`;
	let esc = e.key === `Escape`;
	let closeButtonShowing = document.getElementById(`closeButton`);
	let submitButtonShowing = document.getElementById(`submitButton`);
	
	if(enter && submitButtonShowing){
		e.preventDefault();
		submitButtonShowing.click()
	}else if(esc && closeButtonShowing){
		closeButtonShowing.click();
	}
};